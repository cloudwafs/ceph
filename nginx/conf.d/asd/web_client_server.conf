# Web客户端
server {
    include         /sysvol/etc/nginx/conf.d/web_client_protocol.conf;
    include         /sysvol/etc/nginx/conf.d/web_client_http_port.conf;
    include         /sysvol/etc/nginx/conf.d/web_client_https_port.conf;
    include         /sysvol/etc/nginx/conf.d/watermark.conf;
    include         /sysvol/etc/nginx/conf.d/server_name.conf;
    
    # 限制请求头中的Referer，防止跨站点攻击
    include         /sysvol/etc/nginx/conf.d/strict_referer.conf;

    # HTTPS 重定向逻辑
    if ($web_client_protocol = 1) {
        set $rewrite_to_https 1;
    }

    if ($https = "on") {
        set $rewrite_to_https 0;
    }

    # 20150918之前客户端使用HTTP协议下载客户端，因此不做重定向
    if ($uri ~* ^/download/.*) {
        set $rewrite_to_https 0;
    }

    # 20160624之前客户端不支持HTTPS开关，因此不做重定向
    if ($uri ~* ^/installer/.*) {
        set $rewrite_to_https 0;
    }

    # 重定向到HTTPS
    if ($rewrite_to_https) {
        rewrite        ^(.*)       https://$host$1         last;
    }

    # HTTP 重定向逻辑
    if ($web_client_protocol = 0) {
        set $rewrite_to_http 1;
    }

    if ($https = "") {
        set $rewrite_to_http 0;
    }

    # 20150918之前客户端使用HTTP协议下载客户端，因此不做重定向
    if ($uri ~* ^/download/.*) {
        set $rewrite_to_http 0;
    }

    # 20160624之前客户端不支持HTTPS开关，因此不做重定向
    if ($uri ~* ^/installer/.*) {
        set $rewrite_to_http 0;
    }

    # watermark请求不重定向到HTTP，因为客户端发送watermark请求时不支持重定向
    if ($uri ~* ^/watermark/.*) {
        set $rewrite_to_http 0;
    }

    # 重定向到HTTP
    if ($rewrite_to_http) {
        rewrite        ^(.*)       http://$host$1         last;
    }
        

    # 配置在location下的client_max_body_size对UNIX Socket无效，因此移动到server配置下
    client_max_body_size 0;

    if ($http_user_agent ~* mobile|ios|android) {
        set $root "/sysvol/apphome/app/ShareWebMobile";
    }

    if ($http_user_agent !~* mobile|ios|android) {
        set $root "/sysvol/apphome/app/ShareWebClient";
    }

    root $root;

    location = / {
        index index.html;

        expires -1;
    }

    # 静态资源
    location ~* ^/(download)/ {
    }

    location ~* ^/(libs|scripts|styles|assets)/ {
        expires max;
    }

    location /oauth {
        if ($http_user_agent ~* mobile|ios|android) {
            rewrite ^(.*)$ /#$1 redirect;
        }
        
        proxy_pass http://127.0.0.1:8181;
        expires -1;
    }

    location /sso {
        # TODO 正式版需要实现基于Node的/sso接口，用来处理部分表单认证的用户需求
        # if ($http_user_agent ~* mobile|ios|android) {
        #     rewrite ^(.*)$ /#$1 redirect;
        # }
        
        # proxy_pass http://127.0.0.1:10080;

        # TODO 临时方案，先全部由JS处理SSO
        rewrite ^(.*)$ /#$1 redirect;
        
        expires -1;

    }

    location ~ ^/(link|preview|image|media|invitation|getfiles) {
        rewrite ^(.*)$ /#$1 redirect;
    }

    location = /crossdomain.xml {
        alias /sysvol/conf/crossdomain.xml;
    }

    # API调用
    location /api/ {
        proxy_pass http://127.0.0.1:10080/;
        expires -1;
    }

    # EACHTTP
    location /openapi/eachttp/ {
        proxy_method POST;
        proxy_pass http://127.0.0.1:9998/;
        expires -1;
    }

    # EFSHTTP
    location /openapi/efshttp/ {
        proxy_method POST;
        proxy_pass http://127.0.0.1:9123/;
        expires -1;
    }

    #EDocEx
    location /openapi/batchdownload/ {
        proxy_pass http://127.0.0.1:9065/;
        expires -1;
    }

    # 下载CA证书
    location = /download/ca.crt {
        alias /usr/local/nginx/cert/ca.crt;
    }

    # 客户端升级重定向，兼容旧客户端升级
    location /installer {
        proxy_pass http://127.0.0.1:10080;
        expires -1;
    }

    # 客户端跳转Web重定向 (6.0新UI重定向到 /login)
    location /home {
        proxy_pass http://127.0.0.1:10080;
        expires -1;
    }

    # 客户端跳转Web重定向 (6.0新UI重定向到 /login)
    location /jumping {
        proxy_pass http://127.0.0.1:10080;
        expires -1;
    }

    # 客户端跳转Web重定向
    location /login {
        rewrite ^(.*)$  /#/login redirect;
    }

    # 万户认证url重定向
    location /authorize {
        rewrite ^(.*)$  /#/authorize redirect;
    }

    error_page  404                 /404.html;
    location = /404.html {
        root    html;
    }

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504    /50x.html;
    location = /50x.html {
        root    html;
    }

}